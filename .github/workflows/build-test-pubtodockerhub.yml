name: "build-test-pubtodockerhub"

on:
  push:
  pull_request:

jobs:
  build-test-pubtodockerhub:
    runs-on: ubuntu-latest
    steps:

      - name: "Build: checkout source code"
        uses: actions/checkout@v2          
      - name: "Build: build docker image"
        run: |
          docker build ./image/ -t localimage:latest


      - name: "Tests: download a virus (just for test !)"
        run: |
          curl -L "https://github.com/ytisf/theZoo/blob/dd88d539de6c91e39483848fa0bd2fe859009c3e/malware/Binaries/Win32.LuckyCat/Win32.LuckyCat.zip?raw=true" > /tmp/Win32.LuckyCat.zip
          cd /tmp/ && unzip -P infected ./Win32.LuckyCat.zip
      - name: "Tests: run clamscan on this folder (contains the virus)"
        run: |
          docker run -d --rm --name clamscan-docker -v /tmp/:/folder-to-scan/ -e SCAN_AT_STARTUP="1" -e FRESHCLAM_AT_STARTUP="1" -e CRON_CLAMSCAN="0 0 * * *" -e SMTP_HOST="" -e SMTP_PORT="" localimage:latest
          docker ps
          sleep 60 && docker logs clamscan-docker
      - name: "Tests: 1st test -> 1 running container?"
        run: |
          NB_CONTAINERS=$(docker ps | grep " Up " | wc -l)
          test $NB_CONTAINERS = 1
      - name: "Tests: 2nd test -> clamscan-docker well scan the given folder"
        run: |
          test "$(docker logs clamscan-docker | grep 'SCAN SUMMARY')" = '----------- SCAN SUMMARY -----------'
      - name: "Tests: 3rd test -> clamscan-docker well detect the virus (1 file)"
        run: |
          test "$(docker logs clamscan-docker | grep 'Infected files' | grep '1')" != ''



      - name: "Push: prepare version from git tags/branchs"
        id: docker_tag_meta
        uses: docker/metadata-action@v3
        with:
          images: abesesr/clamscan-docker
      - name: "Push: login to DockerHub"
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin  
      - name: "Push: push docker image"
        if: github.event_name != 'pull_request'
        run: |
          docker build ./image/ -t localimage:latest
          DOCKER_TAGS="${{ steps.docker_tag_meta.outputs.tags }}"
          for DOCKER_TAG in $DOCKER_TAGS
          do
            docker tag localimage:latest $DOCKER_TAG
            docker push $DOCKER_TAG
          done
